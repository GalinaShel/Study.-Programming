1. Первоначальная настройка Git, создание первого каталога, индексация файла.

1.1. Первоначальная настройка Git.
При первоначальной настройке были указаны имя пользователя, email и редактор для сообщений - notepad.exe.
После установки git было запущено приложение "Git CMD". С помощью команды $git config были произведены следующие действия:
 а)$git config --global user.name "Galina Sh"
Указание имени пользователя Galina Sh
 б)$git config --global user.email "gshel.work@gmail.com"
Добавление email пользователя gshel.work@gmail.com
 в)$git config --global core.editor "C:\Windows\system32\notepad.exe"
Выбор редактора сообщений notepad.exe
 г)$git config --list
Проверка установленных настроек: первоначальная настройка прошла успешно, так как, в частности, был выведен следующий результат:
...
user.name=Galina Sh
user.emale=gshel.work@gmail.com
core.editor=C:\Windows\system32\notepad.exe
...

1.2. Создание первого каталога, индексация файла.
Для дальнейшей работы был создан каталог с именем "Лабораторная по Git". Данный каталог был инициализирован с помощью команды $git init (после перехода в эту директорию).
В директории был создан данный файл с именем "Шелест_ЛР1.txt". Он был проиндексирован путем выполнения $git add Шелест_ЛР1.txt, затем был добавлен коммит о создании файла: $git commit -m "created a report file"
Об успешном выполнении операций свидетельствует сообщение
...
[master (root-commit) 63d61e5] created a report file
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 "\320\250\320\265\320\273\320\265\321\201\321\202_\320\233\320\2401.txt"
...
Данные изменения будут также проиндексированы с коммитом "added a report on the first task"

2. Игнорирование, сравнение, удаление, перемещение файлов.

2.1. Игнорирование файлов.

Был создан файл .gitignore с содержанием:
"#игнорировать файлы с расширением .html
*.html

#игнорировать файлы, в директории черновики/
черновики/"
Данное действие было сохранено в истории с коммитом "file added .gitignore".

Были добавлены файл "file.html" и папка "черновики" с файлом "file 1".
При добавлении коммита "files for ignore added" эти файлы были успешно проигнорированы.

2.2. Сравнение файлов.

Был изменен файл .gitignore. Изменения проиндексированы не были. Для просмотра изменений использована команда git diff.
Результат использования:
diff --git a/.gitignore b/.gitignore
index 169aff0..a2b50c3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,7 @@
 *.html

 #игнорировать файлы, в директории черновики/
-черновики/
\ No newline at end of file
+черновики/
+
+#игнорировать файлы с расширением *.list
+*.list
\ No newline at end of file

Показывает нам, какие изменения внесены. Строки со знаком "-" были удалены, обозначенные "+" - добавлены в файл.

2.3. Удаление файлов.

Файл .gitignore был изменен так, чтобы file.html стал виден.
После этого была применена команда git rm file.html, результат выполнения которой представляет собой:
rm 'file.html'
Данный файл был удален из директории.

2.4. Перемещение файлов.

Командой mkdir была создана директория lib. Далее был добавлен файл hello.txt. Это было отмечено коммитами.
Файл hello.txt перемещён в lib командой "git mv hello.txt lib". Результат:
git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        renamed:    hello.txt -> lib/hello.txt
Был добавлен коммит "hello.txt moved".

3. История коммитов.

Поскольку команда git log может использоваться с различными аргументами и опциями, для демонстрации было выбрано несколько. А именно, опция --pretty, --name-only и --oneline.

3.1. git log --pretty выводит информацию обо всех коммитах (если не указано ограничений) в следующем формате:
commit 044f346ade474b96bc82a7e0453ac01b5671b7d4
Author: Galina Sh <gshel.work@gmail.com>
Date:   Thu Jan 21 08:27:07 2021 +0700

    files for ignore added

Мы можем увидеть коммит, его автора и дату.

3.2. git log --name-only показывает аналогичную информацию, но после информации о коммите выводит список измененых файлов. Например:
commit dfad1833692bb78279ba4f2ff7f3ce41f9ddedf6
Author: Galina Sh <gshel.work@gmail.com>
Date:   Thu Jan 21 07:29:35 2021 +0700

    file added .gitignore

.gitignore

Здесь мы видим, что был изменен файл .gitignore.

3.3. git log --oneline выводит сокращенную информацию о коммитах: только сам коммит и только несколько символов SHA-1 чек-суммы вместо всех 40. В данном случае:
a84487f (HEAD -> master) item 2 has been added to the report
44c7d30 hello.txt moved
f154896 changed hello.txt
9f3a1a6 made hello.txt and lib
9884a01 file delete file.html
e19c766 file changed .gitignore
044f346 files for ignore added
dfad183 file added .gitignore
00803c8 added a report on the first task
63d61e5 created a report file 

Возврат из истории коммитов к работе в командной строке выполняется нажатием q (Windows 10).

4. Отмена и метки.

4.1. Отмена изменений.

Отмена изменений бывает трёх видов. Это отмена индексации, изменение коммита и отмена изменений в файле.

4.1.1. Изменение коммита.
Выполняется командой git commit --amend, изменяет (перезаписывает) последний коммит. Использует последнюю индексацию изменений.
Продемонстрировано на примере создания коммита "item 2 and 3 has been added to the report" (перезапись "item 2 has been added to the report").

4.1.2. Отмена индексации.
Выполняется посредством исользования git restore --staged <file>. Так, для примера был создан файл lib/file.txt, изменен lib/hello.txt. Проведена индексация:
$ git add .
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   lib/file.txt
        modified:   lib/hello.txt
После чего файл hello.txt был убран из индекса:
$ git restore --staged lib/hello.txt
$ git status
On branch masteraged for commit:
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   lib/file.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   lib/hello.txt

Теперь можно добавить коммит "new file file.txt", проиндексировать другой файл и закоммитить "changed hello.txt".

4.1.3. Отмена изменений в файле.

Коммиты из прошлого подпункта были сохранены, теперь продемонстрируем отмену изменений в файле полностью на примере файла hello.txt.
Добавляем изменения в файл. Проверяем:
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   lib/hello.txt

no changes added to commit (use "git add" and/or "git commit -a")

Возвращаем файл к версии последнего коммита:
$ git checkout -- lib/hello.txt

$ git status
On branch master
nothing to commit, working tree clean

4.2. Метки.

4.2.1. Создание метки.

Была создана метка v1.0 к состоянию файлов на данный момент (метка аннотированная):
$ git tag -a v1.0 -m "report version 1.0"
$ git tag
v1.0

4.2.2. Удаление метки.

Так как метка занимает не то место, которое должна, метка была удалена:
$ git tag -d v1.0
Deleted tag 'v1.0' (was edde97f)

4.2.3. Отложенное создание метки.

Метка была создана к коммиту о первом пункте в отчете с использованием части контрольной суммы коммита:
$ git tag -a v1.0 -m "report version 1.0" 00803c8e

4.2.4. Просмотр информации о метке.

Информацию о метке можно просмотреть с помощью команды git show:
$ git show v1.0
tag v1.0
Tagger: Galina Sh <gshel.work@gmail.com>
Date:   Fri Jan 29 03:52:46 2021 +0700

report version 1.0

commit 00803c8e0561183587213ab0a1c33605e210ee6d (tag: v1.0)
Author: Galina Sh <gshel.work@gmail.com>
Date:   Sat Dec 5 15:50:02 2020 +0700

    added a report on the first task

